Version of session file format:
               1
Time of storage:
               "Sun Oct 14 03:13:00 UTC 2012"
Layout:        VerticalP (TerminalP {paneGroups = fromList [], paneTabs = Just TopP, currentPage = 0, detachedId = Nothing, detachedSize = Nothing}) (HorizontalP (TerminalP {paneGroups = fromList [("Browser",HorizontalP (TerminalP {paneGroups = fromList [], paneTabs = Nothing, currentPage = 0, detachedId = Nothing, detachedSize = Nothing}) (HorizontalP (TerminalP {paneGroups = fromList [], paneTabs = Nothing, currentPage = 0, detachedId = Nothing, detachedSize = Nothing}) (TerminalP {paneGroups = fromList [], paneTabs = Nothing, currentPage = 0, detachedId = Nothing, detachedSize = Nothing}) 368) 102)], paneTabs = Just BottomP, currentPage = 0, detachedId = Nothing, detachedSize = Nothing}) (TerminalP {paneGroups = fromList [], paneTabs = Nothing, currentPage = 0, detachedId = Nothing, detachedSize = Nothing}) 716) 1430
Population:    [(Just (ErrorsSt ErrorsState),[SplitP RightP,SplitP TopP]),(Just (FilesSt FilesState),[SplitP RightP,SplitP TopP]),(Just (BufferSt (BufferState "/home/dan/Haskell/htms/Htms.hs" 0)),[SplitP LeftP]),(Just (InfoSt (InfoState (Just (Reexported (ReexportedDescr {dsrMbModu = Just (PM {pack = PackageIdentifier {pkgName = PackageName "base", pkgVersion = Version {versionBranch = [4,5,0,0], versionTags = []}}, modu = ModuleName ["Prelude"]}), dsrDescr = Real (RealDescr {dscName' = "show", dscMbTypeStr' = Just "a -> String", dscMbModu' = Just (PM {pack = PackageIdentifier {pkgName = PackageName "base", pkgVersion = Version {versionBranch = [4,5,0,0], versionTags = []}}, modu = ModuleName ["Prelude"]}), dscMbLocation' = Just (Location {locationSLine = 150, locationSCol = 5, locationELine = 150, locationECol = 31}), dscMbComment' = Just "<document comment>", dscTypeHint' = MethodDescr (Reexported (ReexportedDescr {dsrMbModu = Just (PM {pack = PackageIdentifier {pkgName = PackageName "base", pkgVersion = Version {versionBranch = [4,5,0,0], versionTags = []}}, modu = ModuleName ["Prelude"]}), dsrDescr = Real (RealDescr {dscName' = "Show", dscMbTypeStr' = Just "class Show a\n        showsPrec  :: Int -> a -> ShowS\n    show  :: a -> String\n    showList  :: [a] -> ShowS\n", dscMbModu' = Just (PM {pack = PackageIdentifier {pkgName = PackageName "base", pkgVersion = Version {versionBranch = [4,5,0,0], versionTags = []}}, modu = ModuleName ["Prelude"]}), dscMbLocation' = Just (Location {locationSLine = 127, locationSCol = 1, locationELine = 161, locationECol = 44}), dscMbComment' = Just "Conversion of values to readable 'GHC.Base.String's.\n\nMinimal complete definition: 'GHC.Show.showsPrec' or 'GHC.Show.show'.\n\nDerived instances of 'GHC.Show.Show' have the following properties, which\n are compatible with derived instances of :\n\n*  The result of 'GHC.Show.show' is a syntactically correct Haskell\n   expression containing only constants, given the fixity\n   declarations in force at the point where the type is declared.\n   It contains only the constructor names defined in the data type,\n   parentheses, and spaces.  When labelled constructor fields are\n   used, braces, commas, field names, and equal signs are also used.\n\n\n*  If the constructor is defined to be an infix operator, then\n   'GHC.Show.showsPrec' will produce infix applications of the constructor.\n\n\n*  the representation will be enclosed in parentheses if the\n   precedence of the top-level constructor in @x@ is less than @d@\n   (associativity is ignored).  Thus, if @d@ is @0@ then the result\n   is never surrounded in parentheses; if @d@ is @11@ it is always\n   surrounded in parentheses, unless it is an atomic expression.\n\n\n*  If the constructor is defined using record syntax, then 'GHC.Show.show'\n   will produce the record-syntax form, with the fields given in the\n   same order as the original declaration.\n\n\nFor example, given the declarations\n\n@ infixr 5 :^:\n data Tree a =  Leaf a  |  Tree a :^: Tree a\n@the derived instance of 'GHC.Show.Show' is equivalent to\n\n@ instance (Show a) => Show (Tree a) where\n\n        showsPrec d (Leaf m) = showParen (d > app_prec) $\n             showString \"Leaf \" . showsPrec (app_prec+1) m\n          where app_prec = 10\n\n        showsPrec d (u :^: v) = showParen (d > up_prec) $\n             showsPrec (up_prec+1) u .\n             showString \" :^: \"      .\n             showsPrec (up_prec+1) v\n          where up_prec = 5\n@Note that right-associativity of @:^:@ is ignored.  For example,\n\n*  @'GHC.Show.show' (Leaf 1 :^: Leaf 2 :^: Leaf 3)@ produces the string\n   @\"Leaf 1 :^: (Leaf 2 :^: Leaf 3)\"@.\n\n\n", dscTypeHint' = ClassDescr [] [SimpleDescr {sdName = "show", sdType = Just "a -> String", sdLocation = Just (Location {locationSLine = 150, locationSCol = 5, locationELine = 150, locationECol = 31}), sdComment = Just "<document comment>", sdExported = True},SimpleDescr {sdName = "showList", sdType = Just "[a] -> ShowS", sdLocation = Just (Location {locationSLine = 157, locationSCol = 5, locationELine = 157, locationECol = 30}), sdComment = Just "<document comment>", sdExported = True},SimpleDescr {sdName = "showsPrec", sdType = Just "Int -> a -> ShowS", sdLocation = Just (Location {locationSLine = 142, locationSCol = 5, locationELine = 146, locationECol = 23}), sdComment = Just "<document comment>", sdExported = True}], dscExported' = True})})), dscExported' = True})}))))),[SplitP RightP,SplitP TopP,GroupP "Browser",SplitP BottomP,SplitP BottomP]),(Just (LogSt LogState),[SplitP RightP,SplitP BottomP]),(Just (ModulesSt (ModulesState 187 (SystemScope,False) (Just (ModuleName ["Prelude"]),Just "show") (ExpanderState {packageExp = ([],[]), packageExpNoBlack = ([],[]), packageDExp = ([],[]), packageDExpNoBlack = ([],[]), workspaceExp = ([],[]), workspaceExpNoBlack = ([],[]), workspaceDExp = ([],[]), workspaceDExpNoBlack = ([],[]), systemExp = ([],[]), systemExpNoBlack = ([[337,17,0],[337,17],[337],[228,4,0],[228,4],[228],[98,7,3],[98,7],[98,3],[98]],[[24]])}))),[SplitP RightP,SplitP TopP,GroupP "Browser",SplitP BottomP,SplitP TopP]),(Just (SearchSt (SearchState {searchString = "show", searchScope = SystemScope, searchMode = Prefix {caseSense = False}})),[SplitP RightP,SplitP TopP]),(Just (BufferSt (BufferState "/home/dan/Haskell/htms/Util.hs" 655)),[SplitP LeftP]),(Just (WorkspaceSt WorkspaceState),[SplitP RightP,SplitP TopP,GroupP "Browser",SplitP TopP]),(Just (BufferSt (BufferState "/home/dan/Haskell/htms/htms.cabal" 285)),[SplitP LeftP])]
Window size:   (1918,1047)
Completion size:
               (750,400)
Workspace:     Just "/home/dan/Haskell/htms/htms.lkshw"
Active pane:   Just "Htms.hs"
Toolbar visible:
               True
FindbarState:  (False,FindState {entryStr = "from", entryHist = ["fromS","mstrict","strict","decode"], replaceStr = "", replaceHist = [], caseSensitive = False, entireWord = False, wrapAround = False, regex = False, lineNr = 1})
Recently opened files:
               ["/home/dan/.leksah-0.12/packageSources/binary-0.5.1.0/src/Data/Binary.hs","/home/dan/.leksah-0.12/packageSources/bytestring-0.9.2.1/Data/ByteString/Lazy.hs","/home/dan/.leksah-0.12/packageSources/containers-0.4.2.1/Data/Map.hs","/home/dan/.leksah-0.12/packageSources/containers-0.4.2.1/Data/Graph.hs","/home/dan/.leksah-0.12/packageSources/bytestring-0.9.2.1/Data/ByteString.hs","/home/dan/.leksah-0.12/packageSources/network-2.3.0.14/dist/build/Network/Socket/ByteString.hs","/home/dan/.leksah-0.12/leksah-welcome/src/Main.hs"]
Recently opened workspaces:
               ["/home/dan/leksah.lkshw"]